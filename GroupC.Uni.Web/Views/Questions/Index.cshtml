@model IEnumerable<GroupC.Uni.Web.ViewModels.QuestionIndexViewModel>

@{
    
    Layout = "~/Views/Shared/_layout.cshtml";
}
<link href="~/css/ChildRowForTable.css" rel="stylesheet" />
<link href="~/lib/datatables/css/jquery.dataTables.min.css" rel="stylesheet" />
@section Scripts{
    <script src="~/lib/datatables/js/dataTables.jqueryui.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            //alert("!!!");
        });
        //
        // Pipelining function for DataTables. To be used to the `ajax` option of DataTables
        // Copied from https://datatables.net/examples/server_side/pipeline.html
        //
        $.fn.dataTable.pipeline = function (opts) {
            // Configuration options
            var conf = $.extend({
                pages: 5,     // number of pages to cache. That means action(url) will be called in 1st, 6th, 11th ... pages
                url: '/Questions/GetFilteredItems',  // url to controller action
                data: null,   // function or object with parameters to send to the server
                method: 'GET' // Ajax HTTP method
            }, opts);

            // Private variables for storing the cache
            var cacheLower = -1;
            var cacheUpper = null;
            var cacheLastRequest = null;
            var cacheLastJson = null;

            return function (request, drawCallback, settings) {
                var ajax = false;
                var requestStart = request.start;
                var drawStart = request.start;
                var requestLength = request.length;
                var requestEnd = requestStart + requestLength;

                if (settings.clearCache) {
                    // API requested that the cache be cleared
                    ajax = true;
                    settings.clearCache = false;
                }
                else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
                    // outside cached data - need to make a request
                    ajax = true;
                }

                else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||
                    JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns) ||
                    JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)
                ) {
                    // properties changed (ordering, columns, searching)
                    ajax = true;
                }

                // Store the request for checking next time around
                cacheLastRequest = $.extend(true, {}, request);

                if (ajax) {
                    // Need data from the server
                    if (requestStart < cacheLower) {
                        requestStart = requestStart - (requestLength * (conf.pages - 1));

                        if (requestStart < 0) {
                            requestStart = 0;
                        }
                    }

                    cacheLower = requestStart;
                    cacheUpper = requestStart + (requestLength * conf.pages);

                    request.start = requestStart;
                    request.length = requestLength * conf.pages;

                    // Provide the same `data` options as DataTables.
                    if (typeof conf.data === 'function') {
                        // As a function it is executed with the data object as an arg
                        // for manipulation. If an object is returned, it is used as the
                        // data object to submit
                        var d = conf.data(request);
                        if (d) {
                            $.extend(request, d);
                        }
                    }
                    else if ($.isPlainObject(conf.data)) {
                        // As an object, the data given extends the default
                        $.extend(request, conf.data);
                    }

                    settings.jqXHR = $.ajax({
                        "type": conf.method,
                        "url": conf.url,
                        "data": request,
                        "dataType": "json",
                        "cache": false,
                        "success": function (json) {
                            cacheLastJson = $.extend(true, {}, json);

                            if (cacheLower != drawStart) {
                                json.data.splice(0, drawStart - cacheLower);
                            }
                            if (requestLength >= -1) {
                                json.data.splice(requestLength, json.data.length);
                            }

                            drawCallback(json);
                        }
                    });
                }
                else {
                    json = $.extend(true, {}, cacheLastJson);
                    json.draw = request.draw; // Update the echo for each response
                    json.data.splice(0, requestStart - cacheLower);
                    json.data.splice(requestLength, json.data.length);

                    drawCallback(json);
                }
            }
        };

        // Register an API method that will empty the pipelined data, forcing an Ajax
        // fetch on the next draw (i.e. `table.clearPipeline().draw()`)
        // Copied from https://datatables.net/examples/server_side/pipeline.html
        $.fn.dataTable.Api.register('clearPipeline()', function () {
            return this.iterator('table', function (settings) {
                settings.clearCache = true;
            });
        });
        /////////////////////
        /////RowChild
        function format(d) {
            debugger;
            var str = (d.choices_string);
            var myArray = JSON.parse(str.replace(/\(/g, '[').replace(/\)/g, ']'));
            var table = document.createElement('table');
            for (var i = 0; i < myArray.length; i++) {
                var tr = document.createElement('tr');

                //var td1 = document.createElement('td');
                var td2 = document.createElement('td');

                //var text1 = document.createTextNode('Choice');
                var text2 = document.createTextNode(myArray[i]);

                //td1.appendChild(text1);
                td2.appendChild(text2);
                //tr.appendChild(td1);
                tr.appendChild(td2);

                table.appendChild(tr);
            }
            
            return table;
        }
        //
        // DataTables initialisation
        // Copied from https://datatables.net/examples/server_side/pipeline.html
        // Updated according to our data
        //
        $(document).ready(function () {
            var dt =   $('#QuestionTable').DataTable({
                "processing": false,
                "serverSide": true,
                "searching": true,
                "paging": true,
                "ajax": $.fn.dataTable.pipeline({
                    url: "/Questions/GetFilteredItems",
                    "dataSrc": "",
                    pages: 5 //number of pages to cache
                }),
                
                "columns": [
                     
                    // For Question.Id
                    { "data": "id", "name": "Id" ,"visible": false},
                    // For Question.Text
                    { "data": "text", "name": "Text" },
                    // For Question.MArk
                    { "data": "mark", "name": "Mark" },
                    // For Question.IsHtml
                    { "data": "isHtml", "name": "IsHtml" },
                     //For Question.TopicName
                    { "data": "topicName", "name": "TopicName" },
                    //Details 
                    {
                        "class": "details-control",
                        "orderable": false,
                        "data": null,
                        "defaultContent": ""
                        //,'render': function (data, type, row) {
                        //    return '<button class="details-control btn btn-primary "onclick=\'choicesClick(this)\'>Choices</button>'
                        //}
                    },
                    {
                        'data': null, "orderable": false,
                        'render': function (data, type, row) {
                            var myUrl = '@Url.Action("Delete", "Questions")/' + row.id;
                            return '  <button class="btn btn-info" id="' + row.id + '" onclick=\'detailsClick("' + row.id +'")\'>Details</button>'
                                + '  <button class="btn btn-primary" id="' + row.id + '" onclick=\'editClick("' + row.id +'")\'>Edit</button>'
                                + '  <button class="btn btn-danger" id="' + row.id + '" onclick=\'deleteClick("' + row.id + '")\'>Delete</button>'
                             
                        }
                    }
                    //+ ' <a href=\"' + myUrl + '\" ">  delete</a>'
                    //+ '<a class="btn btn-sm delete" data-id="' + row.id + '" data-controller=\'Questions\' data-action=\'Delete\' data-body-message=\'Are you sure you want to delete this Course?\'>delete</a>'
                    //+ '  <button class="btn btn-danger" id="' + row.id + '" onclick="data-id="' + row.id + '" data-controller=\"Questions\" data-action="\Delete\" data-body-message="Are you sure you want to delete this Course?">Delete</button>'

                ]
            });
            //ChildRows
            // Array to track the ids of the details displayed rows
            var detailRows = [];

            $('#QuestionTable tbody').on('click', 'tr td.details-control', function () {
                debugger;
            //function choicesClick(obj) {
                debugger;
                var tr = $(this).closest('tr');
                var row = dt.row(tr);
                var idx = $.inArray(tr.attr('id'), detailRows);

                if (row.child.isShown()) {
                    
                    tr.removeClass('details');
                    row.child.hide();

                    // Remove from the 'open' array
                    detailRows.splice(idx, 1);
                }
                else {
                    tr.addClass('details');
                    row.child(format(row.data())).show();

                    // Add to the 'open' array
                    if (idx === -1) {
                        detailRows.push(tr.attr('id'));
                    }
                }
            
            });

            // On each draw, loop over the `detailRows` array and show any child rows
            dt.on('draw', function () {
                $.each(detailRows, function (i, id) {
                    $('#' + id + ' td.details-control').trigger('click');
                });
            });
            
        });
       
        //Edit button listener
        function editClick(id) {
            window.location.replace("/Questions/Edit/" + id);
            }
        //Delete button listener
        function deleteClick(id) {
            window.location.replace("/Questions/Delete/" + id);
             }
        //Details button listener
        function detailsClick(id) {
            window.location.replace("/Questions/Details/" + id);
        }
    </script>
}
<section class="content">
    <div class="box" style="padding: 20px">
        <div class="box-header">
            <h2 class="box-title">Questions</h2>
        </div>
        <p style="text-align:right">
            <a asp-action="Create" class="btn btn-sm btn-bitbucket" style="margin-right:10px">Create New Question</a>
        </p>

        <table id="QuestionTable" class="table table-striped" >
            <thead>
                <tr>
                    @*<th></th>*@
                    <th >
                            @Html.DisplayNameFor(model => model.Id)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Text)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Mark)
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.IsHtml)*@
                        Is Html
                    </th>
                    <th>
                        @*@Html.DisplayNameFor(model => model.TopicName)*@
                        Topic Name
                    </th>
                    <th>Choices</th>
                    @*<th>
                            Options
                        </th>*@
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
        </table>
    </div>
</section>
