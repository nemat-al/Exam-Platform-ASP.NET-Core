// <auto-generated />
using System;
using GroupC.Uni.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupC.Uni.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200202153530_AddImageToUser")]
    partial class AddImageToUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreationDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ImageURL");

                    b.Property<string>("LastUpdateDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<Guid>("QuestionId");

                    b.Property<int>("Status");

                    b.Property<string>("Text");

                    b.Property<bool>("Type");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("ImageURL");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("DurationInMinutes");

                    b.Property<bool>("IsRandom");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int>("QuestionsCount");

                    b.Property<int>("Status");

                    b.Property<Guid>("TestCenterId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TestCenterId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.ExamQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("ExamId");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int>("Order");

                    b.Property<Guid>("QuestionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsHtml");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<double>("Mark");

                    b.Property<int>("Status");

                    b.Property<string>("Text");

                    b.Property<Guid>("TopicId");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Student", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int>("Status");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<Guid>("ExamId");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int>("Status");

                    b.Property<Guid>("StudentId");

                    b.Property<DateTime>("date");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.SubmissionChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChoiceId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<int>("Status");

                    b.Property<Guid>("SubmissionId");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionChoices");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.TestCenter", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("ApplicationUserId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("TestCenters");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Admin", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Admin")
                        .HasForeignKey("GroupC.Uni.Core.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Choice", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Exam", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GroupC.Uni.Core.Entities.TestCenter", "TestCenter")
                        .WithMany("Exams")
                        .HasForeignKey("TestCenterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.ExamQuestion", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GroupC.Uni.Core.Entities.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Question", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Student", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("Student")
                        .HasForeignKey("GroupC.Uni.Core.Entities.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Submission", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Exam", "Exam")
                        .WithMany("Submissions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GroupC.Uni.Core.Entities.Student", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.SubmissionChoice", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Choice", "Choice")
                        .WithMany("SubmissionChoices")
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GroupC.Uni.Core.Entities.Submission", "Submission")
                        .WithMany("SubmissionChoices")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.TestCenter", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("TestCenter")
                        .HasForeignKey("GroupC.Uni.Core.Entities.TestCenter", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GroupC.Uni.Core.Entities.Topic", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GroupC.Uni.Core.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
